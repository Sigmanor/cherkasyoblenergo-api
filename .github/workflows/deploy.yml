name: Deploy

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/main' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Get repository name
        id: repo_name
        run: echo "repo=$(basename ${{ github.repository }})" >> $GITHUB_OUTPUT

      - name: Execute remote commands via SSH
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          password: ${{ secrets.SSH_PASSWORD }}
          script: |
            set -e

            if ! systemctl is-active --quiet docker; then
              echo "Docker is not running. Starting Docker..."
              sudo systemctl start docker
            fi

            if [ ! -e /var/run/docker.sock ]; then
              echo "Docker socket does not exist at /var/run/docker.sock"
              exit 1
            fi

            if [ ! -w /var/run/docker.sock ]; then
              echo "Current user does not have write access to Docker socket."
              sudo chmod 666 /var/run/docker.sock
            fi

            if ! groups $USER | grep -q docker; then
              echo "Adding $USER to docker group"
              sudo usermod -aG docker $USER
              newgrp docker
            fi

            echo "Docker setup complete. Proceeding with deployment."

            REPO_NAME="${{ github.repository }}"
            REPO_FOLDER="$HOME/apps/${REPO_NAME##*/}"

            echo "Deploying $REPO_NAME to $REPO_FOLDER"

            if ! command -v docker >/dev/null 2>&1; then
              echo "Installing Docker..."
              sudo apt-get update
              sudo apt-get install -y docker.io
            fi

            if [ -d "$REPO_FOLDER" ]; then
              echo "Removing existing repository folder..."
              rm -rf "$REPO_FOLDER"
            fi

            echo "Cloning new version of the repository..."
            git clone "https://github.com/${{ github.repository }}.git" "$REPO_FOLDER"

            cd "$REPO_FOLDER"

            echo "Setting up .env file..."
            echo "${{ secrets.ENV_PROD }}" > .env

            echo "Determining version from Git tags..."
            APP_VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "dev")
            export APP_VERSION
            echo "APP_VERSION=$APP_VERSION" >> .env
            echo "Building version: $APP_VERSION"

            # Check database container status
            echo "Checking database container status..."
            if docker inspect postgresql-db >/dev/null 2>&1; then
              if docker inspect -f '{{.State.Running}}' postgresql-db | grep -q true; then
                echo "Database container is already running, skipping..."
              else
                echo "Database container exists but not running, starting it..."
                docker compose -f docker-compose.db.yml start
              fi
            else
              echo "Database container doesn't exist, creating and starting..."
              docker compose -f docker-compose.db.yml up -d --no-recreate
            fi

            # Always rebuild and restart application container
            echo "Stopping and removing existing application container..."
            if docker inspect cherkasyoblenergo-api >/dev/null 2>&1; then
              docker compose -f docker-compose.app.yml down --rmi all
            fi

            echo "Building and starting application..."
            docker compose -f docker-compose.app.yml build --build-arg APP_VERSION=$APP_VERSION
            docker compose -f docker-compose.app.yml up -d --no-deps --build

            echo "Deployment complete!"
